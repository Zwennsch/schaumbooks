### get all users:
GET http://localhost:8080/api/users HTTP/1.1
Authorization: Basic sven:1234

### get user with id 1:
GET http://localhost:8080/api/users/1 HTTP/1.1
Authorization: Basic sven:1234


### try to get user with with an invalid id 99999:
GET http://localhost:8080/api/users/99999 HTTP/1.1
Authorization: Basic sven:1234

### should get user with username "arvid8"
GET http://localhost:8080/api/users/username/arvid8 HTTP/1.1
Authorization: Basic sven:1234


### should not get any user with username "wrongUsername"
GET http://localhost:8080/api/users/username/wrongUsername HTTP/1.1
Authorization: Basic sven:1234

### Add a new user with Role.Student:
POST http://localhost:8080/api/users HTTP/1.1
content-type: application/json
Authorization: Basic sven:1234

{
    "firstName" : "new added first name",
    "lastName" : "new added last name",
    "email" : "addedMail@mail.com",
    "roles" : ["STUDENT"],
    "className" : "10b",
    "username" : "newUser",
    "password" : "123456"
}


### should Add a new user with Role.Admin and className = null:
POST http://localhost:8080/api/users HTTP/1.1
content-type: application/json
Authorization: Basic sven:1234

{
    "firstName" : "new admin",
    "lastName" : "new admin last name",
    "email" : "admin@mail.com",
    "roles" : ["ADMIN"],
    "className" : null,
    "username" : "newUser2",
    "password" : "123456"
}


### should not Add a new user with Role.Admin and className = "":
POST http://localhost:8080/api/users HTTP/1.1
content-type: application/json
Authorization: Basic sven:1234

{
    "firstName" : "newer admin",
    "lastName" : "newer admin last name",
    "email" : "admin2@mail.com",
    "roles" : ["ADMIN"],
    "className" : "",
    "username" : "newUser2",
    "password" : "123456"
}


### should Add a new user with Role.Admin and no className field at all:
POST http://localhost:8080/api/users HTTP/1.1
content-type: application/json
Authorization: Basic sven:1234

{
    "firstName" : "newer admin",
    "lastName" : "newer admin last name",
    "email" : "admin2@mail.com",
    "roles" : ["ADMIN"],
    "username" : "newAdmin",
    "password" : "123456"
}

### should not Add new user with already taken username 'arvid8:
POST http://localhost:8080/api/users HTTP/1.1
content-type: application/json
Authorization: Basic sven:1234

{
    "firstName" : "given username",
    "lastName" : "lastname",
    "email" : "admin2@mail.com",
    "roles" : ["STUDENT"],
    "className" : "10a",
    "username" : "arvid8",
    "password" : "123456"
}



### UPDATE

### should update student with id 1
PUT http://localhost:8080/api/users/1 HTTP/1.1
Content-Type: application/json
Authorization: Basic sven:1234

{
    "id" : "1",
    "firstName" : "new first name",
    "lastName" : "new last name",
    "className" : "10b",
    "email" : "newMail@mail.com",
    "roles" : ["STUDENT"],
    "username" : "newUserName",
    "password" : "newPassword"
}

### should not update student because of empty fields
PUT http://localhost:8080/api/users/1 HTTP/1.1
Content-Type: application/json
Authorization: Basic sven:1234

{
    "id" : "1",
    "firstName" : "",
    "lastName" : "",
    "className" : "",
    "email" : "invalidEmail"
}



### should not update student, because of invalid id
PUT http://localhost:8080/api/users/999 HTTP/1.1
Content-Type: application/json
Authorization: Basic sven:1234

{
    "id" : "999",
    "title" : "new title",
    "verlag" : "new verlag",
    "isbn" : "2423-123-12551-123",
    "status" : "LENT",
    "student" : null
}

###DELETE
### should delete book
DELETE  http://localhost:8080/api/books/1 HTTP/1.1


### should throw BookNotFoundException on deletebook
DELETE  http://localhost:8080/api/books/9999 HTTP/1.1
