### get all studetnts:
GET http://localhost:8080/api/students HTTP/1.1

### get student with id 1:
GET http://localhost:8080/api/students/1 HTTP/1.1


### try to get student with with anvialid id 99999:
GET http://localhost:8080/api/students/99999 HTTP/1.1


### Add a new student:
POST http://localhost:8080/api/students HTTP/1.1
content-type: application/json

{
    "firstName" : "new added first name",
    "lastName" : "new added last name",
    "className" : "10b",
    "email" : "addedMail@mail.com"
}


### Add a new book without status and id:
POST http://localhost:8080/api/books HTTP/1.1
content-type: application/json

{
    "title" : "title without status, id",
    "verlag" : "new verlag posted",
    "isbn" : "2423-123-12551-123",
    "student" : null
}


### Add invalid new book without title:
POST http://localhost:8080/api/books HTTP/1.1
content-type: application/json

{
    "title" : "",
    "verlag" : "new verlag posted",
    "isbn" : "2423-123-12551-123",
    "student" : null
}


### Add a new book without status and student_id:
POST http://localhost:8080/api/books HTTP/1.1
content-type: application/json

{
    "title" : "title without status, student_id",
    "verlag" : "new verlag posted",
    "isbn" : "2423-123-12551-123"
}

### Add a second book with different status
POST http://localhost:8080/api/books HTTP/1.1
content-type: application/json

{
    "id": null,
    "title": "Lighthouse English 8",
    "isbn": "73649-8632-97942-9",
    "verlag": "klett",
    "status": "MISSING",
    "student": null
}

### should update student with id 1
PUT http://localhost:8080/api/students/1 HTTP/1.1
Content-Type: application/json

{
    "id" : "1",
    "firstName" : "new first name",
    "lastName" : "new last name",
    "className" : "10b",
    "email" : "newMail@mail.com"
}

### should not update student because of empty fields
PUT http://localhost:8080/api/students/1 HTTP/1.1
Content-Type: application/json

{
    "id" : "1",
    "firstName" : "",
    "lastName" : "",
    "className" : "",
    "email" : "invalidEmail"
}



### should not update book, because of invalid id
PUT http://localhost:8080/api/books/999 HTTP/1.1
Content-Type: application/json

{
    "id" : "999",
    "title" : "new title",
    "verlag" : "new verlag",
    "isbn" : "2423-123-12551-123",
    "status" : "LENT",
    "student" : null
}

###DELETE
### should deletebook
DELETE  http://localhost:8080/api/books/1 HTTP/1.1


### should throw BookNotFoundException on deletebook
DELETE  http://localhost:8080/api/books/9999 HTTP/1.1
